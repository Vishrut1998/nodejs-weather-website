{"mappings":"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","sources":["src/app.js","src/utils/geocode.js","src/utils/forecast.js"],"sourcesContent":["const path = require('path')\nconst express = require('express')\nconst hbs = require('hbs')\nconst geocode = require('./utils/geocode')\nconst forecast = require('./utils/forecast')\nconst { RSA_NO_PADDING } = require('constants')\n\nconst app = express()\nconst port = process.env.PORT || 3000\n\n\n\n//Define path for express config\nconst publicDirectory = path.join(__dirname , '../public')\nconst viewsPath = path.join(__dirname , '../templates/views')\nconst partialsPath = path.join(__dirname , '../templates/partials')\n\n//Setup handlebars engine and views location\napp.set('view engine','hbs')\napp.set('views' , viewsPath)\nhbs.registerPartials(partialsPath)\n\n\n//Setup static directory to serve\napp.use(express.static(publicDirectory))   \n\n\n\napp.get('/help' , (req,res) => {\n    res.render('help' , {\n        message : 'For any help or queries, contact :',\n        title : 'Help',\n        name : 'Vishrut Sharma',\n        contact : ' +91 9540105285',\n        emailId : 'sharmavishrut1998@gmail.com'\n    })\n})\n\n\napp.get('',(req,res) => {\n    res.render('index' , {\n        title : 'Weather App',\n        name : 'Vishrut Sharma'\n    })\n    \n})\n\n\napp.get('/about' , (req,res) => {\n    res.render('about' , {\n        title : 'About me:',\n        name : 'Vishrut Sharma'\n    } )\n})\n\n\napp.get('/weather' , (req,res) => {\n\n    if(!req.query.address){\n\n        return res.send({\n            errror : 'You must provide an address'\n        })\n    }\n        geocode(req.query.address , (error , {latitude , longitude , location} = {}) => {\n\n            if(error){\n                return res.send({ error })\n            }\n\n            forecast(latitude, longitude, (error , forecastData) => {\n                if(error){\n                    return res.send({error})\n                }\n                res.send({\n                    forecast : forecastData,\n                    location,\n                    address : req.query.address\n                })\n            })\n\n\n        })\n\n    \n})\n\napp.get('/products' , (req,res) => {\n\n    if(!req.query.search){\n        return res.send({\n            error : 'You must provide a search term'\n        })\n    }\n    console.log(req.query);\n    res.send({\n        products : []\n        })\n})\n\napp.get('/help/*' , (req , res) => {\n    res.render('errors' , {\n\n        errorMessage : 'Help article not found'\n\n    })\n})\n\n\napp.get('*' , (req , res) => {\n\n    res.render('errors' , {\n\n        errorMessage : '404'\n\n    })\n})\n\n\napp.listen(port , () => {\n\n    console.log('Server Started! on port' + port);\n\n})\n","const request = require('request')\nconst geocode = (address , callback) => {\n\nconst geocodeUrl = 'https://api.mapbox.com/geocoding/v5/mapbox.places/'+ address + '.json?access_token=pk.eyJ1IjoidmlzaHJ1dDMxIiwiYSI6ImNrb254MHB0OTA0dmcybm9oNno5eTltbXQifQ.0RXIxO0huJD4ajMFyurlhA'\n\n    request({url : geocodeUrl , json : true}, (error, {body})=> {\n        \n        if(error){\n            callback('Unable to connect to Location Services' , undefined)\n        }\n        else if(body.features.length===0){\n\n            callback('Unable to find Location. Please try another search' , undefined)\n\n        }\n        \n        else{\n            callback(undefined, {\n                latitude : body.features[0].center[0],\n                longitude : body.features[0].center[1],\n                location : body.features[0].place_name \n            })\n        }\n    })\n\n}\n\nmodule.exports = geocode","const request = require('request')\n\nconst forecast = (latitude , longitude , callback) =>{\n\n   // const {latitude , longitude , callback} = forecast => {\n\n    const forecastUrl = `http://api.weatherstack.com/current?access_key=e153992628f37d346fea514423cb6541&query=${latitude},${longitude}&units=f`\n    \n    request({url : forecastUrl , json : true}, (error , {body}) => {\n        \n        if(error){\n            callback('Unable to connect to the services. Please check your network again!', undefined);\n        }\n        else if(body.error){\n            callback('Unable to fetch the cordinates. Please check the cordinates again',undefined);\n        }\n        else{\n            const {temperature , weather_descriptions , feelslike , humidity} = body.current;\n            callback(undefined , `${weather_descriptions}. It is currently ${temperature}\\u00B0. Right now it feels like ${feelslike}\\u00B0. The humidity is ${humidity}%.`)\n        }\n\n        \n\n    })\n\n}\nmodule.exports = forecast"],"names":[],"version":3,"file":"index.js.map"}